package snmaddula.product.crud;

import java.io.InputStream;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Properties;

import javax.cache.configuration.Factory;
import javax.sql.DataSource;

import org.apache.ignite.cache.CacheAtomicityMode;
import org.apache.ignite.cache.CacheMode;
import org.apache.ignite.cache.QueryEntity;
import org.apache.ignite.cache.QueryIndex;
import org.apache.ignite.cache.QueryIndexType;
import org.apache.ignite.cache.store.jdbc.CacheJdbcPojoStoreFactory;
import org.apache.ignite.cache.store.jdbc.JdbcType;
import org.apache.ignite.cache.store.jdbc.JdbcTypeField;
import org.apache.ignite.cache.store.jdbc.dialect.H2Dialect;
import org.apache.ignite.configuration.CacheConfiguration;
import org.apache.ignite.configuration.DataStorageConfiguration;
import org.apache.ignite.configuration.IgniteConfiguration;
import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;
import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;
import org.h2.jdbcx.JdbcDataSource;

/** This file was generated by Ignite Web Console (03/16/2019, 17:39) **/
public class ServerConfigurationFactory {
    /** Secret properties loading. **/
    private static final Properties props = new Properties();

    static {
        try (InputStream in = IgniteConfiguration.class.getClassLoader().getResourceAsStream("secret.properties")) {
            props.load(in);
        }
        catch (Exception ignored) {
            // No-op.
        }
    }

    /** Helper class for datasource creation. **/
    public static class DataSources {
        public static final JdbcDataSource INSTANCE_dsH2_Products = createdsH2_Products();

        private static JdbcDataSource createdsH2_Products() {
            JdbcDataSource dsH2_Products = new JdbcDataSource();

            dsH2_Products.setURL(props.getProperty("dsH2_Products.jdbc.url"));
            dsH2_Products.setUser(props.getProperty("dsH2_Products.jdbc.username"));
            dsH2_Products.setPassword(props.getProperty("dsH2_Products.jdbc.password"));

            return dsH2_Products;
        }
    }

    /**
     * Configure grid.
     * 
     * @return Ignite configuration.
     * @throws Exception If failed to construct Ignite configuration instance.
     **/
    public static IgniteConfiguration createConfiguration() throws Exception {
        IgniteConfiguration cfg = new IgniteConfiguration();

        cfg.setIgniteInstanceName("products-poc");
        
        // Ignite persistence configuration.
        DataStorageConfiguration storageCfg = new DataStorageConfiguration();
        // Enabling the persistence.
        storageCfg.getDefaultDataRegionConfiguration().setPersistenceEnabled(true);
        // Applying settings.
        cfg.setDataStorageConfiguration(storageCfg);
        

        TcpDiscoverySpi discovery = new TcpDiscoverySpi();

        TcpDiscoveryVmIpFinder ipFinder = new TcpDiscoveryVmIpFinder();

        ipFinder.setAddresses(Arrays.asList("127.0.0.1:47500..47510"));

        discovery.setIpFinder(ipFinder);

        cfg.setDiscoverySpi(discovery);

        cfg.setCacheConfiguration(
            cachePriceCache(),
            cacheProductCache()
        );

        return cfg;
    }

    /**
     * Create configuration for cache "PriceCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cachePriceCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("PriceCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsH2_Products;
            };
        });

        cacheStoreFactory.setDialect(new H2Dialect());

        cacheStoreFactory.setTypes(jdbcTypePrice(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Long");
        qryEntity.setValueType("snmaddula.product.crud.entity.Price");
        qryEntity.setKeyFieldName("id");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("id");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("basePrice", "java.lang.Double");
        fields.put("maxRetailPrice", "java.lang.Double");
        fields.put("tax", "java.lang.Double");
        fields.put("id", "java.lang.Long");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("basePrice", "BASE_PRICE");
        aliases.put("maxRetailPrice", "MAX_RETAIL_PRICE");

        qryEntity.setAliases(aliases);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypePrice".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypePrice(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(Long.class);
        type.setValueType("snmaddula.product.crud.entity.Price");
        type.setDatabaseSchema("PUBLIC");
        type.setDatabaseTable("PRICE");

        type.setKeyFields(new JdbcTypeField(Types.BIGINT, "ID", long.class, "id"));

        type.setValueFields(
            new JdbcTypeField(Types.DOUBLE, "BASE_PRICE", Double.class, "basePrice"),
            new JdbcTypeField(Types.DOUBLE, "MAX_RETAIL_PRICE", Double.class, "maxRetailPrice"),
            new JdbcTypeField(Types.DOUBLE, "TAX", Double.class, "tax"),
            new JdbcTypeField(Types.BIGINT, "ID", Long.class, "id")
        );

        return type;
    }

    /**
     * Create configuration for cache "ProductCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheProductCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("ProductCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsH2_Products;
            };
        });

        cacheStoreFactory.setDialect(new H2Dialect());

        cacheStoreFactory.setTypes(jdbcTypeProduct(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Long");
        qryEntity.setValueType("snmaddula.product.crud.entity.Product");
        qryEntity.setKeyFieldName("id");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("id");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("description", "java.lang.String");
        fields.put("title", "java.lang.String");
        fields.put("priceId", "java.lang.Long");
        fields.put("id", "java.lang.Long");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("priceId", "PRICE_ID");

        qryEntity.setAliases(aliases);

        ArrayList<QueryIndex> indexes = new ArrayList<>();

        QueryIndex index = new QueryIndex();

        index.setName("FK2L5UGESXIRS8WP4IQCMJI7G8M_INDEX_1");
        index.setIndexType(QueryIndexType.SORTED);

        LinkedHashMap<String, Boolean> indFlds = new LinkedHashMap<>();

        indFlds.put("priceId", false);

        index.setFields(indFlds);
        indexes.add(index);

        qryEntity.setIndexes(indexes);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeProduct".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeProduct(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(Long.class);
        type.setValueType("snmaddula.product.crud.entity.Product");
        type.setDatabaseSchema("PUBLIC");
        type.setDatabaseTable("PRODUCT");

        type.setKeyFields(new JdbcTypeField(Types.BIGINT, "ID", long.class, "id"));

        type.setValueFields(
            new JdbcTypeField(Types.VARCHAR, "DESCRIPTION", String.class, "description"),
            new JdbcTypeField(Types.VARCHAR, "TITLE", String.class, "title"),
            new JdbcTypeField(Types.BIGINT, "PRICE_ID", Long.class, "priceId"),
            new JdbcTypeField(Types.BIGINT, "ID", Long.class, "id")
        );

        return type;
    }
}